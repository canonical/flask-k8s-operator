# Copyright 2023 Canonical Ltd.
# See LICENSE file for licensing details.

"""Flask charm unit tests for the flask_app module."""

# this is a unit test file
# pylint: disable=protected-access

import json
import typing
import unittest.mock

import pytest
from ops.testing import Harness

from charm_state import CharmState
from constants import FLASK_ENV_CONFIG_PREFIX
from flask_app import FlaskApp


@pytest.mark.parametrize(
    "flask_config",
    [
        pytest.param({"env": "test"}, id="env"),
        pytest.param({"permanent_session_lifetime": 1}, id="permanent_session_lifetime"),
        pytest.param({"debug": True}, id="debug"),
    ],
)
def test_flask_env(harness: Harness, flask_config: dict):
    """
    arrange: create the Flask app object with a controlled charm state.
    act: none.
    assert: flask_environment generated by the Flask app object should be acceptable by Flask app.
    """
    harness.begin_with_initial_hooks()
    charm_state = CharmState(
        secret_storage=harness.charm._charm_state._secret_storage, flask_config=flask_config
    )
    flask_app = FlaskApp(charm_state=charm_state)
    env = flask_app.flask_environment()
    secret_key = env["FLASK_SECRET_KEY"]
    assert len(secret_key) > 10
    del env["FLASK_SECRET_KEY"]
    assert env == {
        f"{FLASK_ENV_CONFIG_PREFIX}{k.upper()}": v if isinstance(v, str) else json.dumps(v)
        for k, v in flask_config.items()
    }


HTTP_PROXY_TEST_PARAMS = [
    pytest.param({}, {}, id="no_env"),
    pytest.param({"JUJU_CHARM_NO_PROXY": "127.0.0.1"}, {"no_proxy": "127.0.0.1"}, id="no_proxy"),
    pytest.param(
        {"JUJU_CHARM_HTTP_PROXY": "proxy.test"}, {"http_proxy": "proxy.test"}, id="http_proxy"
    ),
    pytest.param(
        {"JUJU_CHARM_HTTPS_PROXY": "proxy.test"},
        {"https_proxy": "proxy.test"},
        id="https_proxy",
    ),
    pytest.param(
        {"JUJU_CHARM_HTTP_PROXY": "proxy.test", "JUJU_CHARM_HTTPS_PROXY": "proxy.test"},
        {"http_proxy": "proxy.test", "https_proxy": "proxy.test"},
        id="http_https_proxy",
    ),
]


@pytest.mark.parametrize(
    "set_env, expected",
    HTTP_PROXY_TEST_PARAMS,
)
def test_http_proxy(set_env: typing.Dict[str, str], expected: typing.Dict[str, str], monkeypatch):
    """
    arrange: set juju charm http proxy related environment variables.
    act: generate a flask environment.
    assert: flask_environment generated should contain proper proxy environment variables.
    """
    for set_env_name, set_env_value in set_env.items():
        monkeypatch.setenv(set_env_name, set_env_value)
    charm_state = CharmState(secret_storage=unittest.mock.MagicMock(), flask_config={})
    flask_app = FlaskApp(charm_state=charm_state)
    env = flask_app.flask_environment()
    expected_env: typing.Dict[str, typing.Optional[str]] = {
        "http_proxy": None,
        "https_proxy": None,
        "no_proxy": None,
    }
    expected_env.update(expected)
    for env_name, env_value in expected_env.items():
        assert env.get(env_name) == env.get(env_name.upper()) == env_value
