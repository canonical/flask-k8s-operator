import textwrap

import pytest
from ops.model import Container
from ops.testing import Harness

from charm import FlaskCharm
from charm_state import CharmState
from webserver import GunicornWebserver

FLASK_BASE_DIR = "/srv/flask"


@pytest.mark.parametrize(
    "charm_state_params, config_file",
    [
        (
            {"webserver_workers": 10},
            textwrap.dedent(
                f"""\
                bind = ['0.0.0.0:8000']
                chdir = '{FLASK_BASE_DIR}/app'
                workers = 10"""
            ),
        ),
        (
            {"webserver_threads": 2, "webserver_timeout": 3, "webserver_keepalive": 4},
            textwrap.dedent(
                f"""\
                bind = ['0.0.0.0:8000']
                chdir = '{FLASK_BASE_DIR}/app'
                threads = 2
                keepalive = 4
                timeout = 3"""
            ),
        ),
    ],
)
def test_gunicorn_config(
    monkeypatch,
    harness: Harness,
    charm_state_params,
    config_file,
) -> None:
    """
    arrange: start the flask charm and set flask-app container to be ready with a controlled charm
        state generated by the charm_state_params parameter.
    act: run the callback function of the config-changed event.
    assert: gunicorn configuration file inside the flask app container should change accordingly.
    """
    container: Container = harness.containers[FlaskCharm._FLASK_CONTAINER_NAME]
    webserver = GunicornWebserver(
        charm_state=CharmState(**charm_state_params), flask_container=container
    )
    webserver.update_config(is_webserver_running=False)
    assert container.pull(f"{FLASK_BASE_DIR}/gunicorn.conf.py").read() == config_file
