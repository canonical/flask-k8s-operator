# Copyright 2023 Canonical Ltd.
# See LICENSE file for licensing details.

"""Flask charm unit tests for the webserver module."""

import textwrap
import unittest.mock

import pytest
from ops.model import Container
from ops.testing import Harness

from charm_state import CharmState
from consts import FLASK_CONTAINER_NAME
from webserver import GunicornWebserver

FLASK_BASE_DIR = "/srv/flask"


@pytest.mark.parametrize(
    "charm_state_params, config_file",
    [
        (
            {"webserver_workers": 10},
            textwrap.dedent(
                f"""\
                bind = ['0.0.0.0:8000']
                chdir = '{FLASK_BASE_DIR}/app'
                workers = 10"""
            ),
        ),
        (
            {"webserver_threads": 2, "webserver_timeout": 3, "webserver_keepalive": 4},
            textwrap.dedent(
                f"""\
                bind = ['0.0.0.0:8000']
                chdir = '{FLASK_BASE_DIR}/app'
                threads = 2
                keepalive = 4
                timeout = 3"""
            ),
        ),
    ],
)
def test_gunicorn_config(
    harness: Harness,
    charm_state_params,
    config_file,
) -> None:
    """
    arrange: create the Gunicorn webserver object with a controlled charm state generated by the
        charm_state_params parameter.
    act: invoke the update_config method of the webserver object.
    assert: gunicorn configuration file inside the flask app container should change accordingly.
    """
    container: Container = harness.model.unit.get_container(FLASK_CONTAINER_NAME)
    harness.set_can_connect(FLASK_CONTAINER_NAME, True)
    webserver = GunicornWebserver(
        charm_state=CharmState(**charm_state_params), flask_container=container
    )
    webserver.update_config(is_webserver_running=False)
    assert container.pull(f"{FLASK_BASE_DIR}/gunicorn.conf.py").read() == config_file


@pytest.mark.parametrize("is_running", [True, False])
def test_webserver_reload(monkeypatch, harness: Harness, is_running):
    """
    arrange: put an empty file in the Flask container and create a webserver object with default
        charm state.
    act: run the update_config method of the webserver object with different server running status.
    assert: webserver object should send signal to the Gunicorn server based on the running status.
    """
    container: Container = harness.model.unit.get_container(FLASK_CONTAINER_NAME)
    harness.set_can_connect(FLASK_CONTAINER_NAME, True)
    container.push(f"{FLASK_BASE_DIR}/gunicorn.conf.py", "")
    webserver = GunicornWebserver(charm_state=CharmState(), flask_container=container)
    send_signal_mock = unittest.mock.MagicMock()
    monkeypatch.setattr(container, "send_signal", send_signal_mock)
    webserver.update_config(is_webserver_running=is_running)
    assert send_signal_mock.call_count == (1 if is_running else 0)
